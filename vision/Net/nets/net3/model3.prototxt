# Specifies the model used for classification

name: "model"
input: "data"

# input_dim: batch size x feature dimension x height x width

# Batch size for classifications
input_dim: 1
# Feature dimension. Example: RGB uses 3.
input_dim: 3
# Height/width of input vector/image
input_dim: 125 
input_dim: 125

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  # learning rate and decay multipliers for the filters
  param { lr_mult: 1 decay_mult: 1 }
  # learning rate and decay multipliers for the biases
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    num_output: 16     # learn 16 filters
    kernel_size: 11    # each filter is 11x11
    stride: 1          # step 2 pixels between each filter application
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
      value: 0
    }
  }
}
layer {
    name: "reluConv1"
    type: "ReLU"
    bottom: "conv1"
    top: "conv1"
}


layer {
  name: "fc1"
  type: "InnerProduct"
  bottom: "conv1"
  top: "fc1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    weight_filler {
      type: "xavier"
    }
    num_output: 40
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "fc1"
  top: "fc1"
}

layer {
  name: "fc2"
  type: "InnerProduct"
  bottom: "fc1"
  top: "fc2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    weight_filler {
      type: "xavier"
    }
    num_output: 4
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "out"
  bottom: "fc2"
  top: "out"
  type: "TanH"
}
