import cv2
import numpy as np
from utilities import const

# returns distance between loc1 and loc2
# locs - two-element tuples of integers x,y
def dist(loc1, loc2):
    dist_squared(loc1, loc2)**(1.0/2.0)

def dist_squared(loc1, loc2):
    ((loc1[0] - loc2[0])*(loc1[0] - loc2[0]) + (loc1[1] - loc2[1])*(loc1[1] - loc2[1]))
    

# Given a point, maps pixel to val if in range
# map - image
# lower - 3 tuple lower bound
# upper - 3 tuple upper bound
# val - value to replace if in range
# loc - location of pixel x,y
def mapRange(map, lower, upper, val, loc):
    x, y = loc
    blue, green, red = map[y, x]
    blueLow, greenLow, redLow = lower
    blueUp, greenUp, redUp = upper
    
    if blueLow < blue \
            and blueUp > blue \
            and redLow < red \
            and redUp > red \
            and greenLow < green \
            and greenUp > green:
        map[y, x] = val
    return map


# Setting up video capture
vc = cv2.VideoCapture(0)

if vc.isOpened():
    rval, frame = vc.read()
else:
    rval = False

rval, frame = vc.read()


# reading hyperparameters generated by calibrate.py
f = open('hyperparams.txt', 'r')
x = 10
y = 20
maxRedLoc = [int(x) for x in f.readline().split(',') ]
d = int(float(f.readline()))
d_squared = d * d
f.close()


while 1:

    rval, frame = vc.read()
    frame = frame[0+const.OFFSET_Y:const.HEIGHT+const.OFFSET_Y, 0+const.OFFSET_X:const.WIDTH+const.OFFSET_X]
    
    # identify the black ring around disk
    # TODO optimize by ignoring areas that are clearly not the disc (well outside the distance)
    for i in range(np.shape(frame)[0]):
        for j in range(np.shape(frame)[1]):
            if abs(dist_squared((j, i), maxRedLoc) - d_squared) < 10:                   # 10 is the fault tolerance
                frame = mapRange(frame, (0,0,0), (130, 130, 130), (120, 180, 120), (j, i))     # range for determining the dark values in the ring,  map to a green
    
    # convert to hsv
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    
    # apply range threshold to entire image
    lower_green = np.array([30,10,0])
    upper_green = np.array([70,140,180])
    mask = cv2.inRange(hsv, lower_green, upper_green)
    mask = 255 - mask
    mask_b = cv2.medianBlur(mask,7)

    cv2.imshow('original', frame)
    cv2.imshow('mask', mask)
    cv2.imshow('hsv', hsv)
    cv2.imshow("preview", mask_b)
    key = cv2.waitKey(20)
    if key == 27:
        break

cv2.destroyAllWindows()
